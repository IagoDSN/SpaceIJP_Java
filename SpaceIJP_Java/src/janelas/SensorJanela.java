/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import java.util.List;
import javax.swing.table.DefaultTableModel;

import Script.SensorDAO;
import Script.SensoresJA;
import Script.FogueteDao;
import Script.FogueteJA;
import javax.swing.DefaultComboBoxModel;

import javax.swing.JOptionPane;

/**
 *
 * @author Iagod
 */
public class SensorJanela extends javax.swing.JFrame {

    private SensorDAO SensorDao = new SensorDAO();
    List<SensoresJA> listaSensores = SensorDao.getLista();
    private FogueteDao fogueteDao = new FogueteDao();

    private boolean emEdicao = false;
    private boolean criando = false;

    /**
     * Creates new form FogueteJanela
     */
    public SensorJanela() {
        initComponents();
    }

    SensorJanela(Main aThis, boolean b) {
        initComponents();
        carregarTabelaSensores();
        configurarComboFoguetes();
        salvar.setEnabled(false);
        cancelar.setEnabled(false);
        inputCodigo.setEnabled(false);
        inputTipo.setEnabled(false);
        inputUnidade.setEnabled(false);
        inputPosition.setEnabled(false);
        cbFoguetes.setEnabled(false);
    }

    private void carregarTabelaSensores() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaSensor.getModel();
        modelo.setRowCount(0);
        for (SensoresJA s : listaSensores) {
            modelo.addRow(new Object[]{
                s.getCodSensores(),
                s.getTipo(),
                s.getUnidade(),
                s.getPosition(),
                s.getFogueteNome()
            });
        }
    }

    private void configurarComboFoguetes() {
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        FogueteDao fdao = new FogueteDao();
        List<FogueteJA> foguetes = fdao.getLista();
        for (FogueteJA f : foguetes) {
            modelo.addElement(f);
        }
        cbFoguetes.setModel(modelo);
        cbFoguetes.setSelectedIndex(-1);

    }

    private void trataEdicao(boolean status) {
        inputTipo.setEnabled(status);
        inputUnidade.setEnabled(status);
        inputPosition.setEnabled(status);
        cbFoguetes.setEnabled(status);

        salvar.setEnabled(status);
        cancelar.setEnabled(status);
        cadastrar.setEnabled(!status);
        editar.setEnabled(!status);
        remover.setEnabled(!status);
        atualizar.setEnabled(!status);
    }

    public boolean validaCampos() {
        if (inputTipo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Informe o tipo de sensor");
            inputTipo.requestFocus();
            return false;
        }
        if (inputUnidade.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Informe a unidade do sensor");
            inputUnidade.requestFocus();
            return false;
        }
        if (inputPosition.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Informe a posição do sensor no foguete");
            inputPosition.requestFocus();
            return false;
        }
        if (cbFoguetes.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Selecione o foguete ao qual o sensor pertence");
            cbFoguetes.requestFocus();
            return false;
        }
        return true;
    }

    private int gerarCodigoDisponivel() {
        int codigo = 1;
        while (true) {
            boolean existe = false;
            for (SensoresJA s : listaSensores) {
                if (s.getCodSensores() == codigo) {
                    existe = true;
                    break;
                }
            }
            if (!existe) {
                return codigo;
            }
            codigo++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cadastrar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        remover = new javax.swing.JButton();
        atualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaSensor = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        inputCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        inputTipo = new javax.swing.JTextField();
        cancelar = new javax.swing.JButton();
        salvar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        inputUnidade = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        inputPosition = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbFoguetes = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciador de Sensores");

        jPanel1.setBackground(new java.awt.Color(149, 156, 182));

        cadastrar.setBackground(new java.awt.Color(37, 99, 235));
        cadastrar.setText("Criar");
        cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarActionPerformed(evt);
            }
        });

        editar.setBackground(new java.awt.Color(5, 150, 105));
        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        remover.setBackground(new java.awt.Color(220, 38, 38));
        remover.setText("Remover");
        remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerActionPerformed(evt);
            }
        });

        atualizar.setBackground(new java.awt.Color(245, 158, 11));
        atualizar.setText("Altualizar");
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(cadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(remover, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(remover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(atualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );

        tabelaSensor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "tipo", "unidade", "posicao", "foguete"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaSensor);
        if (tabelaSensor.getColumnModel().getColumnCount() > 0) {
            tabelaSensor.getColumnModel().getColumn(0).setResizable(false);
            tabelaSensor.getColumnModel().getColumn(1).setResizable(false);
            tabelaSensor.getColumnModel().getColumn(2).setResizable(false);
            tabelaSensor.getColumnModel().getColumn(3).setResizable(false);
            tabelaSensor.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Codigo:");

        inputCodigo.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Tipo:");

        cancelar.setBackground(new java.awt.Color(255, 0, 51));
        cancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        salvar.setBackground(new java.awt.Color(51, 204, 0));
        salvar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        salvar.setText("Salvar");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Unidade:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Posição:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Foguete:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(inputTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(122, 122, 122)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                    .addComponent(cbFoguetes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(182, 182, 182)
                                .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 166, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(inputPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(cbFoguetes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inputUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarActionPerformed
        SensoresJA s = new SensoresJA();
        s.setCodSensores(0);
        s.setTipo("");
        s.setUnidade("");
        s.setPosition("");
        s.setFogueteCodFoguete(0);

        listaSensores.add(s);
        carregarTabelaSensores();

        int linha = listaSensores.size() - 1;
        if (linha >= 0) {
            tabelaSensor.setRowSelectionInterval(linha, linha);
        }

        inputCodigo.setText("0");
        inputTipo.setText("");
        inputUnidade.setText("");
        inputPosition.setText("");
        cbFoguetes.setSelectedIndex(-1);

        criando = true;
        emEdicao = true;
        trataEdicao(true);
    }//GEN-LAST:event_cadastrarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        // TODO add your handling code here:
        int linha = tabelaSensor.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para editar!");
            return;
        }

        SensoresJA s = listaSensores.get(linha);

        inputCodigo.setText(String.valueOf(s.getCodSensores()));
        inputTipo.setText(s.getTipo());
        inputUnidade.setText(s.getUnidade());
        inputPosition.setText(s.getPosition());

        criando = false;
        emEdicao = true;
        trataEdicao(true);
    }//GEN-LAST:event_editarActionPerformed

    private void removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerActionPerformed
        // TODO add your handling code here:
        int linha = tabelaSensor.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um sensor para remover.");
            return;
        }

        SensoresJA s = listaSensores.get(linha);

        int resposta = JOptionPane.showConfirmDialog(this,
                "Deseja realmente remover o sensor \"" + s.getTipo() + "\"?",
                "Confirmação", JOptionPane.YES_NO_OPTION);

        if (resposta == JOptionPane.YES_OPTION) {
            SensorDAO dao = new SensorDAO();
            if (dao.deletar(s.getCodSensores())) {
                JOptionPane.showMessageDialog(this, "Sensor removido com sucesso!");
                listaSensores.remove(s);
                carregarTabelaSensores();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao remover sensor.");
            }
        }
    }//GEN-LAST:event_removerActionPerformed

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
        // TODO add your handling code here:
        carregarTabelaSensores();
    }//GEN-LAST:event_atualizarActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        // TODO add your handling code here:
        if (!emEdicao) {
            return;
        }

        int linha = tabelaSensor.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para salvar!");
            return;
        }

        if (!validaCampos()) {
            return;
        }

        SensoresJA s = listaSensores.get(linha);

        s.setTipo(inputTipo.getText().trim());
        s.setUnidade(inputUnidade.getText().trim());
        s.setPosition(inputPosition.getText().trim());

        FogueteJA fogueteSelecionado = (FogueteJA) cbFoguetes.getSelectedItem();
        if (fogueteSelecionado == null) {
            JOptionPane.showMessageDialog(this, "Selecione o foguete ao qual o sensor pertence!");
            cbFoguetes.requestFocus();
            return;
        }
        s.setFogueteCodFoguete(fogueteSelecionado.getCodFoguete());

        SensorDAO dao = new SensorDAO();
        boolean ok;

        if (s.getCodSensores() == 0) {
            ok = dao.inserir(s);
            if (ok) {
                inputCodigo.setText(String.valueOf(s.getCodSensores()));
            }
        } else {
            ok = dao.alterar(s);
        }

        if (!ok) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar/atualizar sensor no banco!");
            return;
        }

        listaSensores = dao.getLista();
        carregarTabelaSensores();

        for (int i = 0; i < listaSensores.size(); i++) {
            if (listaSensores.get(i).getCodSensores() == s.getCodSensores()) {
                tabelaSensor.setRowSelectionInterval(i, i);
                break;
            }
        }

        emEdicao = false;
        criando = false;
        trataEdicao(false);

        JOptionPane.showMessageDialog(this, "Sensor salvo com sucesso!");
    }//GEN-LAST:event_salvarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        emEdicao = false;
        criando = false;
        trataEdicao(false);
        carregarTabelaSensores();
    }//GEN-LAST:event_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FogueteJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FogueteJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FogueteJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FogueteJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FogueteJanela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atualizar;
    private javax.swing.JButton cadastrar;
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> cbFoguetes;
    private javax.swing.JButton editar;
    private javax.swing.JTextField inputCodigo;
    private javax.swing.JTextField inputPosition;
    private javax.swing.JTextField inputTipo;
    private javax.swing.JTextField inputUnidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton remover;
    private javax.swing.JButton salvar;
    private javax.swing.JTable tabelaSensor;
    // End of variables declaration//GEN-END:variables
}
